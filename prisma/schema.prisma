generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                BigInt                  @id @default(autoincrement())
  firstName                         String                  @db.VarChar(100)
  lastName                          String                  @db.VarChar(100)
  userName                          String                  @db.VarChar(100)
  email                             String                  @unique @db.VarChar(100)
  password                          String                  @db.VarChar(100)
  phoneNumber                       String                  @db.Char(14)
  address                           String                  @db.VarChar(100)
  profile                           String                  @db.VarChar(100)
  position                          String                  @db.VarChar(100)
  role                              Role                    @default(ADMIN)
  isActive                          Boolean                 @default(true)
  createdAt                         DateTime                @default(now())
  createdBy                         BigInt?
  updatedAt                         DateTime                @default(now())
  updatedBy                         BigInt?
  deleted                           Boolean                 @default(false)
  borrowerCreatedByRel              Borrower[]              @relation("borrowerCreatedByRel")
  borrowerUpdatedByRel              Borrower[]              @relation("borrowerUpdatedByRel")
  borrowingCreatedByRel             Borrowing[]             @relation("borrowingCreatedByRel")
  borrowingUpdatedByRel             Borrowing[]             @relation("borrowingUpdatedByRel")
  inventoryCreatedByRel             Inventory[]             @relation("inventoryCreatedByRel")
  inventoryUpdatedByRel             Inventory[]             @relation("inventoryUpdatedByRel")
  inventoryGroupCreatedByRel        InventoryGroup[]        @relation("inventoryGroupCreatedByRel")
  inventoryGroupUpdatedByRel        InventoryGroup[]        @relation("inventoryGroupUpdatedByRel")
  inventoryTypeCreatedByRel         InventoryType[]         @relation("inventoryTypeCreatedByRel")
  inventoryTypeUpdatedByRel         InventoryType[]         @relation("inventoryTypeUpdatedByRel")
  inventoryHistoryCreatedByRel      InventoryHistory[]      @relation("inventoryHistoryCreatedByRel")
  inventoryHistoryUpdatedByRel      InventoryHistory[]      @relation("inventoryHistoryUpdatedByRel")
  inventoryStockCreatedByRel        InventoryStock[]        @relation("inventoryStockCreatedByRel")
  inventoryStockUpdatedByRel        InventoryStock[]        @relation("inventoryStockUpdatedByRel")
  itemCreatedByRel                  Item[]                  @relation("itemCreatedByRel")
  itemUpdatedByRel                  Item[]                  @relation("itemUpdatedByRel")
  organizationCreatedByRel          Organization[]          @relation("organizationCreatedByRel")
  organizationUpdatedByRel          Organization[]          @relation("organizationUpdatedByRel")
  inventoryStockHistoryCreatedId    InventoryStockHistory[] @relation("inventoryStockHistoryCreatedId")
  inventoryStockHistoryUpdatedByRel InventoryStockHistory[] @relation("inventoryStockHistoryUpdatedByRel")
  createdByRel                      User?                   @relation("selfCreatedByRel", fields: [createdBy], references: [id])
  selfCreatedByRel                  User[]                  @relation("selfCreatedByRel")
  updatedByRel                      User?                   @relation("selfUpdatedByRel", fields: [updatedBy], references: [id])
  selfUpdatedByRel                  User[]                  @relation("selfUpdatedByRel")
  userHistoryCreatedByRel           UserHistory[]           @relation("userHistoryCreatedByRel")
  userHistoryUpdatedByRel           UserHistory[]           @relation("userHistoryUpdatedByRel")
  userHistoryIdRel                  UserHistory[]           @relation("userHistoryIdRel")
  documentCreatedByRel              Document[]              @relation("documentCreatedByRel")
  documentUpdatedByRel              Document[]              @relation("documentUpdatedByRel")
  borrowingHistoryCreatedByRel      BorrowingHistory[]      @relation("borrowingHistoryCreatedByRel")
  borrowingHistoryUpdatedByRel      BorrowingHistory[]      @relation("borrowingHistoryUpdatedByRel")
}

model UserHistory {
  id                      BigInt   @id @default(autoincrement())
  userId                  BigInt
  createdAt               DateTime @default(now())
  createdBy               BigInt?
  updatedAt               DateTime @default(now())
  updatedBy               BigInt?
  deleted                 Boolean  @default(false)
  oldData                 Json
  newData                 Json
  userHistoryCreatedByRel User?    @relation("userHistoryCreatedByRel", fields: [createdBy], references: [id])
  userHistoryUpdatedByRel User?    @relation("userHistoryUpdatedByRel", fields: [updatedBy], references: [id])
  userHistoryIdRel        User     @relation("userHistoryIdRel", fields: [userId], references: [id])
}

model Inventory {
  id                    BigInt                  @id @default(autoincrement())
  inventoryName         String                  @db.VarChar(100)
  refId                 String                  @db.VarChar(100)
  description           String                  @db.Text
  condition             String                  @db.Text
  note                  String                  @db.Text
  isBorrowable          Boolean                 @default(true)
  inventoryTypeId       BigInt
  inventoryGroupId      BigInt
  createdAt             DateTime                @default(now())
  createdBy             BigInt?
  updatedAt             DateTime                @default(now())
  updatedBy             BigInt?
  deleted               Boolean                 @default(false)
  inventoryCreatedByRel User?                   @relation("inventoryCreatedByRel", fields: [createdBy], references: [id])
  inventoryTypeIdRel    InventoryType           @relation("inventoryTypeIdRel", fields: [inventoryTypeId], references: [id])
  inventoryGroupIdRel   InventoryGroup          @relation("inventoryGroupIdRel", fields: [inventoryGroupId], references: [id])
  inventoryUpdatedByRel User?                   @relation("inventoryUpdatedByRel", fields: [updatedBy], references: [id])
  inventoryHistoryIdRel InventoryHistory[]      @relation("inventoryHistoryIdRel")
  inventoryStockIdRel   InventoryStock[]        @relation("inventoryStockIdRel")
  itemInventoryIdRel    Item[]                  @relation("itemInventoryIdRel")
  inventoryIdRel        InventoryStockHistory[] @relation("inventoryIdRel")
  documentIdRel         Document[]              @relation("documentIdRel")
}

model Document {
  id                   BigInt    @id @default(autoincrement())
  inventoryId          BigInt
  url                  String    @db.VarChar(200)
  createdBy            BigInt?
  createdAt            DateTime  @default(now())
  updatedBy            BigInt?
  updatedAt            DateTime  @default(now())
  deleted              Boolean   @default(false)
  documentIdRel        Inventory @relation("documentIdRel", fields: [inventoryId], references: [id])
  documentCreatedByRel User?     @relation("documentCreatedByRel", fields: [createdBy], references: [id])
  documentUpdatedByRel User?     @relation("documentUpdatedByRel", fields: [updatedBy], references: [id])
}

model InventoryType {
  id                        BigInt      @id @default(autoincrement())
  inventoryTypeName         String      @unique @db.VarChar(50)
  description               String?
  deleted                   Boolean     @default(false)
  createdAt                 DateTime    @default(now())
  createdBy                 BigInt?
  updatedBy                 BigInt?
  updatedAt                 DateTime    @default(now())
  inventoryTypeIdRel        Inventory[] @relation("inventoryTypeIdRel")
  inventoryTypeCreatedByRel User?       @relation("inventoryTypeCreatedByRel", fields: [createdBy], references: [id])
  inventoryTypeUpdatedByRel User?       @relation("inventoryTypeUpdatedByRel", fields: [updatedBy], references: [id])
}

model InventoryGroup {
  id                         BigInt      @id @default(autoincrement())
  inventoryGroupName         String      @unique @db.VarChar(50)
  description                String?
  createdAt                  DateTime    @default(now())
  createdBy                  BigInt?
  updatedBy                  BigInt?
  updatedAt                  DateTime    @default(now())
  deleted                    Boolean     @default(false)
  inventoryGroupCreatedByRel User?       @relation("inventoryGroupCreatedByRel", fields: [createdBy], references: [id])
  inventoryGroupUpdatedByRel User?       @relation("inventoryGroupUpdatedByRel", fields: [updatedBy], references: [id])
  inventoryGroupIdRel        Inventory[] @relation("inventoryGroupIdRel")
}

model InventoryStock {
  id                         BigInt                  @id @default(autoincrement())
  inventoryId                BigInt
  currentQuantity            Int
  totalQuantity              Int
  createdBy                  BigInt?
  createdAt                  DateTime                @default(now())
  updatedBy                  BigInt?
  updatedAt                  DateTime                @default(now())
  deleted                    Boolean                 @default(false)
  inventoryStockCreatedByRel User?                   @relation("inventoryStockCreatedByRel", fields: [createdBy], references: [id])
  inventoryStockIdRel        Inventory               @relation("inventoryStockIdRel", fields: [inventoryId], references: [id])
  inventoryStockUpdatedByRel User?                   @relation("inventoryStockUpdatedByRel", fields: [updatedBy], references: [id])
  inventoryStockHistoryIdRel InventoryStockHistory[] @relation("inventoryStockHistoryIdRel")
}

model InventoryStockHistory {
  revId                             BigInt          @id @default(autoincrement())
  id                                BigInt
  inventoryId                       BigInt
  currentQuantity                   Int
  totalQuantity                     Int
  createdBy                         BigInt?
  createdAt                         DateTime        @default(now())
  updatedBy                         BigInt?
  updatedAt                         DateTime        @default(now())
  deleted                           Boolean         @default(false)
  inventoryIdRel                    Inventory       @relation("inventoryIdRel", fields: [inventoryId], references: [id])
  inventoryStockHistoryCreatedId    User?           @relation("inventoryStockHistoryCreatedId", fields: [createdBy], references: [id])
  inventoryStockHistoryUpdatedByRel User?           @relation("inventoryStockHistoryUpdatedByRel", fields: [updatedBy], references: [id])
  inventoryStockHistoryIdRel        InventoryStock? @relation("inventoryStockHistoryIdRel", fields: [id], references: [id])
}

model InventoryHistory {
  revId                        BigInt    @id @default(autoincrement())
  id                           BigInt
  inventoryName                String    @db.VarChar(100)
  refId                        String    @db.VarChar(100)
  description                  String    @db.Text
  condition                    String    @db.Text
  note                         String    @db.Text
  isBorrowable                 Boolean   @default(true)
  inventoryTypeId              BigInt
  inventoryGroupId             BigInt
  createdBy                    BigInt?
  createdAt                    DateTime  @default(now())
  updatedBy                    BigInt?
  updatedAt                    DateTime  @default(now())
  deleted                      Boolean   @default(false)
  inventoryHistoryIdRel        Inventory @relation("inventoryHistoryIdRel", fields: [id], references: [id])
  inventoryHistoryCreatedByRel User?     @relation("inventoryHistoryCreatedByRel", fields: [createdBy], references: [id])
  inventoryHistoryUpdatedByRel User?     @relation("inventoryHistoryUpdatedByRel", fields: [updatedBy], references: [id])
}

model Item {
  id                 BigInt     @id @default(autoincrement())
  borrowingId        BigInt?
  inventoryId        BigInt?
  quantity           BigInt
  status             StatusItem @default(OUT)
  preCondition       String?
  postCondition      String?
  createdBy          BigInt?
  createdAt          DateTime   @default(now())
  updatedBy          BigInt?
  updatedAt          DateTime   @default(now())
  deleted            Boolean    @default(false)
  itemBorrowingIdRel Borrowing? @relation("itemBorrowingIdRel", fields: [borrowingId], references: [id])
  itemCreatedByRel   User?      @relation("itemCreatedByRel", fields: [createdBy], references: [id])
  itemInventoryIdRel Inventory? @relation("itemInventoryIdRel", fields: [inventoryId], references: [id])
  itemUpdatedByRel   User?      @relation("itemUpdatedByRel", fields: [updatedBy], references: [id])
}

model Borrowing {
  id                    BigInt             @id @default(autoincrement())
  borrowerId            BigInt
  dueDate               DateTime           @db.Date
  status                Status             @default(PENDING)
  invoiceNumber         String?
  specialInstruction    String
  createdBy             BigInt?
  createdAt             DateTime           @default(now())
  updatedBy             BigInt?
  updatedAt             DateTime           @default(now())
  deleted               Boolean            @default(false)
  borrowerIdRel         Borrower?          @relation("borrowerIdRel", fields: [borrowerId], references: [id])
  borrowingCreatedByRel User?              @relation("borrowingCreatedByRel", fields: [createdBy], references: [id])
  borrowingUpdatedByRel User?              @relation("borrowingUpdatedByRel", fields: [updatedBy], references: [id])
  borrowingHistoryIdRel BorrowingHistory[] @relation("borrowingHistoryIdRel")
  itemBorrowingIdRel    Item[]             @relation("itemBorrowingIdRel")
}

model BorrowingHistory {
  revId                        BigInt    @id @default(autoincrement())
  id                           BigInt
  borrowerId                   BigInt
  dueDate                      DateTime  @db.Date
  status                       Status
  specialInstruction           String
  createdBy                    BigInt?
  createdAt                    DateTime  @default(now())
  updatedBy                    BigInt?
  updatedAt                    DateTime  @default(now())
  deleted                      Boolean   @default(false)
  borrowerHistoryIdRel         Borrower? @relation("borrowerHistoryIdRel", fields: [borrowerId], references: [id])
  borrowingHistoryIdRel        Borrowing @relation("borrowingHistoryIdRel", fields: [id], references: [id])
  borrowingHistoryCreatedByRel User?     @relation("borrowingHistoryCreatedByRel", fields: [createdBy], references: [id])
  borrowingHistoryUpdatedByRel User?     @relation("borrowingHistoryUpdatedByRel", fields: [updatedBy], references: [id])
}

model Borrower {
  id                      BigInt             @id @default(autoincrement())
  borrowerName            String             @db.VarChar(100)
  organizationId          BigInt
  identityCard            String             @db.Char(10)
  identityNumber          String             @db.VarChar(50)
  phoneNumber             String             @db.Char(14)
  createdBy               BigInt?
  createdAt               DateTime           @default(now())
  updatedBy               BigInt?
  updatedAt               DateTime           @default(now())
  deleted                 Boolean            @default(false)
  borrowerCreatedByRel    User?              @relation("borrowerCreatedByRel", fields: [createdBy], references: [id])
  borrowerUpdatedByRel    User?              @relation("borrowerUpdatedByRel", fields: [updatedBy], references: [id])
  borrowerOrganizationRel Organization?      @relation("borrowerOrganizationRel", fields: [organizationId], references: [id])
  borrowerHistoryIdRel    BorrowingHistory[] @relation("borrowerHistoryIdRel")
  borrowerIdRel           Borrowing[]        @relation("borrowerIdRel")
}

model Organization {
  id                       BigInt     @id @default(autoincrement())
  organizationName         String     @db.VarChar(100)
  address                  String     @db.VarChar(100)
  organizationStatus       String     @db.VarChar(100)
  note                     String
  createdBy                BigInt?
  createdAt                DateTime   @default(now())
  updatedBy                BigInt?
  updatedAt                DateTime   @default(now())
  deleted                  Boolean    @default(false)
  borrowerOrganizationRel  Borrower[] @relation("borrowerOrganizationRel")
  organizationCreatedByRel User?      @relation("organizationCreatedByRel", fields: [createdBy], references: [id])
  organizationUpdatedByRel User?      @relation("organizationUpdatedByRel", fields: [updatedBy], references: [id])
}

model Message {
  id           BigInt   @id @default(autoincrement())
  name         String   @db.VarChar(100)
  organization String   @db.VarChar(100)
  email        String   @db.VarChar(100)
  comment      String   @db.Text
  createdAt    DateTime @default(now())
}

model Post {
  id                  BigInt   @id @default(autoincrement())
  type                PostType
  title               String   @db.VarChar(150)
  headerPhoto         String   @db.VarChar(250)
  place               String   @db.VarChar(50)
  writer              String   @db.VarChar(50)
  date                String   @db.VarChar(50)
  generation          String   @db.VarChar(50)
  firstParagraph      String   @db.Text
  secondParagraph     String   @db.Text
  thirdParagraph      String   @db.Text
  fourthParagraph     String   @db.Text
  firstImage          String?  @db.VarChar(250)
  captionFirstImage   String?  @db.VarChar(150)
  secondImage         String?  @db.VarChar(250)
  captionSecondImage  String?  @db.VarChar(150)
  thirdImage          String?  @db.VarChar(250)
  captionThirdImage   String?  @db.VarChar(150)
  photoCollage        String[] @db.Text
  captionPhotoCollage String   @db.VarChar(200)
  quote               String   @db.Text
  nameQuote           String   @db.VarChar(50)
  createdBy           BigInt?
  createdAt           DateTime @default(now())
  updatedBy           BigInt?
  updatedAt           DateTime @default(now())
  deleted             Boolean  @default(false)
}

enum PostType {
  ARTICLE
  REPORT
  TRAINING
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  DONE
}

enum StatusItem {
  IN
  OUT
}
